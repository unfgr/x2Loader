/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package x2loader;
import java.awt.Event;
import java.awt.event.ActionListener;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FileFilter;
import java.io.InputStream;
import java.net.URLDecoder;
import java.nio.file.Files;
import java.util.concurrent.TimeUnit;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.MouseInputListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;
import jssc.*;
/**
 *
 * @author User
 */
public class MainGui extends javax.swing.JFrame {
private File lastPath;
private boolean consoleFeedbackStatus = false;
private String[] portNames = Comms.getInstance().getPortsList();
public boolean autoScroll = true;
public boolean occupiedPort = false;
private int currentMode = 0;   //only used in mode 2 , so either 0 or 2
    /**
     * Creates new form mainGUI
     */
    public MainGui() {
        initComponents();

        for(int i = 0;i<portNames.length;i++)
        portsComboBox.addItem(portNames[i]);
        portsComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
            comPortSelectionClicked(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boardSettingGRP = new javax.swing.ButtonGroup();
        portsComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        consoleTextArea = new javax.swing.JTextArea();
        niosModeButton = new javax.swing.JButton();
        fpgaModeButton = new javax.swing.JButton();
        consoleEnableButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        sramSize = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        sramBase = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        ArmEnableButton = new javax.swing.JButton();
        FPGAenableButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        filePath = new javax.swing.JLabel();
        sendtextField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        autoScrollCheckBox = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        sendCRCheckBox = new javax.swing.JCheckBox();
        sendNLCheckBox = new javax.swing.JCheckBox();
        clearButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        ArmConsoleCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        portsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portsComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("COM Port:");

        consoleTextArea.setEditable(false);
        consoleTextArea.setColumns(20);
        consoleTextArea.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        consoleTextArea.setLineWrap(true);
        consoleTextArea.setRows(5);
        consoleTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(consoleTextArea);

        niosModeButton.setText("Upload FW to NIOS");
        niosModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                niosModeButtonActionPerformed(evt);
            }
        });

        fpgaModeButton.setText("Upload BitStream");
        fpgaModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpgaModeButtonActionPerformed(evt);
            }
        });

        consoleEnableButton.setText("Enable Console");
        consoleEnableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consoleEnableButtonActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Nios Settings"));
        jPanel2.setToolTipText("NIOS Settings");

        sramSize.setText("20480");
        sramSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sramSizeActionPerformed(evt);
            }
        });

        jLabel3.setText("SRAM Size:");

        sramBase.setText("0000");

        jLabel4.setText("SRAM Base Addr:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sramSize, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sramBase, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sramSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(sramBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Board Recovery");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Board Settings"));

        ArmEnableButton.setText("Switch to ARM");
        ArmEnableButton.setMaximumSize(new java.awt.Dimension(112, 30));
        ArmEnableButton.setMinimumSize(new java.awt.Dimension(112, 30));
        ArmEnableButton.setPreferredSize(new java.awt.Dimension(112, 30));
        ArmEnableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArmEnableButtonActionPerformed(evt);
            }
        });

        FPGAenableButton.setText("Switch to FPGA");
        FPGAenableButton.setMaximumSize(new java.awt.Dimension(116, 30));
        FPGAenableButton.setMinimumSize(new java.awt.Dimension(116, 30));
        FPGAenableButton.setPreferredSize(new java.awt.Dimension(116, 30));
        FPGAenableButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FPGAenableButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FPGAenableButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addComponent(ArmEnableButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(FPGAenableButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ArmEnableButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("Connect");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("File:");

        filePath.setText("Nothing Uploaded Yet");

        sendtextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendtextFieldActionPerformed(evt);
            }
        });

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        autoScrollCheckBox.setSelected(true);
        autoScrollCheckBox.setText("AutoScroll");
        autoScrollCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoScrollCheckBoxActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Console Options"));

        sendCRCheckBox.setText("Send CR Character");

        sendNLCheckBox.setText("Send NL Character");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendNLCheckBox)
                    .addComponent(sendCRCheckBox))
                .addGap(0, 13, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sendCRCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sendNLCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("V0.3.2 Beta");

        ArmConsoleCheckBox.setText("ARM Console");
        ArmConsoleCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArmConsoleCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(portsComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sendtextField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(autoScrollCheckBox))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fpgaModeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(niosModeButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(consoleEnableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ArmConsoleCheckBox)
                        .addGap(9, 9, 9)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(portsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(filePath)
                    .addComponent(jLabel5)
                    .addComponent(ArmConsoleCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(niosModeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fpgaModeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(consoleEnableButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(autoScrollCheckBox)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(sendtextField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(clearButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void portsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portsComboBoxActionPerformed

    }//GEN-LAST:event_portsComboBoxActionPerformed

    private void comPortSelectionClicked(java.awt.event.MouseEvent evt){
    portsComboBox.removeAllItems();
    String[] portNames = Comms.getInstance().getPortsList();   
    for(int i = 0;i<portNames.length;i++){
        portsComboBox.addItem(portNames[i]);
        }    
    portsComboBox.setSelectedItem(Comms.getInstance().comPortName);
    }
    
    private void consoleEnableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consoleEnableButtonActionPerformed
      ControlConsole();
    }//GEN-LAST:event_consoleEnableButtonActionPerformed

    private void niosModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_niosModeButtonActionPerformed
        occupiedPort = true;
        if(consoleFeedbackStatus){
         ControlConsole();
        }   
        Comms.getInstance().comportInit();
        if(Comms.getInstance().sendString("SETMODE3\r\n")){
            String reply = Comms.getInstance().getString(15);
            System.out.println("Got: " + reply);
            if(reply.equals("Mode Set to 3\r\n")){
                reply = null;
                consoleTextArea.append("Uploading NIOS Firmware....\r\n");
                Converter cv = new Converter();
                final JFileChooser fc = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter("HEX FILES", "hex");
                fc.setFileFilter(filter);
                fc.setCurrentDirectory(lastPath);
                int retval = fc.showOpenDialog(this);
                if(retval==JFileChooser.APPROVE_OPTION){
                    File uFile = fc.getSelectedFile();
                    filePath.setText(uFile.toPath().toString());
                    lastPath = uFile;
                    try{
                        String bitStream = new String(Files.readAllBytes(uFile.toPath()));
                        byte[] binaryStream = cv.convertNIOSHEX(bitStream, Integer.parseInt(sramSize.getText()), Integer.parseInt(sramBase.getText()));
                        Comms.getInstance().sendData(binaryStream);
                        consoleTextArea.append(Comms.getInstance().getString(86));
                        consoleTextArea.append("Upload Successful\r\n");
                    }
                    catch(Exception E){
                        System.out.println("Exception: Unable to Open and Upload File\r\n");
                        System.out.println(E);
                    }
                } 
            }
            else
            consoleTextArea.append("ERROR: Illegal reply From MCU, try to Reset the Board and try again\r\n");
        }
        else
        consoleTextArea.append("ERROR: Failed to Send NIOS Upload Command, try to Reset the Board and try again\r\n");
        
    occupiedPort = false;   
    }//GEN-LAST:event_niosModeButtonActionPerformed

    private void fpgaModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpgaModeButtonActionPerformed
        occupiedPort = true;
        if(consoleFeedbackStatus){
         ControlConsole();
        }   
        //Comms.getInstance().comportInit();
        final JFileChooser fc = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter("RBF FILES", "rbf");
                fc.setFileFilter(filter);
                fc.setCurrentDirectory(lastPath);
                int retval = fc.showOpenDialog(this); 
                if(Comms.getInstance().sendString("SETMODE1\r\n")){                
                if(retval==JFileChooser.APPROVE_OPTION){
                    consoleTextArea.append("Uploading BitStream Design....\r\n");
                    File uFile = fc.getSelectedFile();
                    filePath.setText(uFile.toPath().toString());
                    lastPath = uFile;
                    String reply = Comms.getInstance().getString(15);
                    if(reply.equals("Mode Set to 1\r\n")){
                    try{
                        byte[] bitStream = Files.readAllBytes(uFile.toPath());
                        Comms.getInstance().sendData(bitStream);
                        consoleTextArea.append(Comms.getInstance().getString(74));
                        consoleTextArea.append("Upload Successful\r\n");
                        }
                    catch(Exception E){
                        System.out.println("Unable to Open and Upload File");
                        }
                    }
                }
            else
            consoleTextArea.append("ERROR: Cannot Set BitStream Upload Mode, Set Board to FPGA Mode, reconnect and try again\r\n");
        }
        else
        consoleTextArea.append("ERROR: Cannot Set BitStream Upload Mode, Set Board to FPGA Mode, reconnect and try again\r\n"); 
    occupiedPort = false;        
    }//GEN-LAST:event_fpgaModeButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         if(portsComboBox.getComponentCount()>0 && portsComboBox.getSelectedItem()!=null){
            consoleTextArea.append("Trying to Connect.....\r\n"); 
            Comms.getInstance().setComPort(String.valueOf(portsComboBox.getSelectedItem()));
            //Comms.getInstance().sendString("CONNOK?\r\n");
         }
         else
         {
         return;    
         }
         //if(Comms.getInstance().comPortName.equals(portsComboBox.getSelectedItem()) && Comms.getInstance().getString(4).equals("OK\r\n")){
         if(Comms.getInstance().commPort.getPortName().equals(portsComboBox.getSelectedItem())){
         consoleTextArea.append("Port Opened Successfully\r\n");
         }
         else
         {
          consoleTextArea.append("Cannot Open Selected Port. Is it already in Use?");
         }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void ControlConsole(){
            Comms.getInstance().comportInit();
            String commandString;
            if(!consoleFeedbackStatus){
                if(!ArmConsoleCheckBox.isSelected())
                    commandString = "SETMODE2\r\n";                     //preset command
                else
                    commandString = "";       
                Comms.getInstance().enableConsoleFeedBack(false);  //disable event activity
                Comms.getInstance().purgeRX();                      //clear buffer
                if(Comms.getInstance().sendString(commandString)){
                    String reply = Comms.getInstance().getString(15);
                    System.out.println("GOT: " + reply);
                    if(reply.equals("Mode Set to 2\r\n" ) || ArmConsoleCheckBox.isSelected()){
                        ArmConsoleCheckBox.setEnabled(false);
                        Comms.getInstance().enableConsoleFeedBack(true);
                        consoleFeedbackStatus = true;
                        consoleTextArea.append("\r\nConsole Feedback Enabled\r\n");
                        consoleEnableButton.setText("Disable Console");
                    }
                    else{
                        consoleTextArea.append("Warning: Cannot get reply from Board, trying to reset Comms Channel.....\r\n");
                        byte[] commandData = {0,0};
                        if(Comms.getInstance().sendData(commandData)){
                             consoleTextArea.append("Console Feedback Resetted, try to Re-enable Console Now\r\n");
                             Comms.getInstance().enableConsoleFeedBack(false);
                            consoleFeedbackStatus = false;
                            consoleEnableButton.setText("Enable Console");
                            }
                        else{
                            consoleTextArea.append("ERROR: Comms Problem, Reset the board and try Again\r\n");
                            }
                        }
                }
                else
                consoleTextArea.append("ERROR: Cannot initialize Connection With Serial Port,try to Reset the Board and try again\r\n");

            }
            else
            {
             commandString = "";
             byte[] commandData = {0,0};
             if(Comms.getInstance().sendData(commandData)){
                consoleTextArea.append("\r\nConsole Feedback Disabled\r\n");
                Comms.getInstance().enableConsoleFeedBack(false);
                consoleFeedbackStatus = false;
                consoleEnableButton.setText("Enable Console");
                }
             else{
                 consoleTextArea.append("ERROR: Cannot Disable Console Feedback\r\n");
                 }
            }      
    }
    
    private void sramSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sramSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sramSizeActionPerformed

    private void sendtextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendtextFieldActionPerformed
    if(Comms.getInstance().getComPortStatus() && !occupiedPort && !sendtextField.getText().equals("")){
        String message1 = sendtextField.getText();
        consoleTextArea.append("SEND>>>" + message1 + "\r\n");
        sendtextField.setText("");
        if(sendCRCheckBox.isSelected())
            message1 = message1 + "\r";
        if(sendNLCheckBox.isSelected())
            message1 = message1 + "\n";    
        //TODO IMPLEMENT SEND Zig-Zag Protocol
   }
    else{
        if(sendtextField.getText().equals(""))
        consoleTextArea.append("\r\nYou MUST write something first\r\n");
        else
        consoleTextArea.append("Board Not Connected\r\n");
        }
    
    }//GEN-LAST:event_sendtextFieldActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
    consoleTextArea.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    private void autoScrollCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoScrollCheckBoxActionPerformed
    if(autoScrollCheckBox.isSelected()){
        autoScroll = true;
        }
    else
        {
        autoScroll = false;
        }
    }//GEN-LAST:event_autoScrollCheckBoxActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
   if(Comms.getInstance().getComPortStatus() && !occupiedPort && !sendtextField.getText().equals("")){
        String message1 = sendtextField.getText();
        
        if(sendCRCheckBox.isSelected())
            message1 = message1 + "\r";
        if(sendNLCheckBox.isSelected())
            message1 = message1 + "\n";
        if(Comms.getInstance().sendString(message1)){
        if(consoleFeedbackStatus){
            consoleTextArea.append("SEND>>>" + message1 + "\r\n");
            sendtextField.setText("");   
            }
        else
            consoleTextArea.append("\r\nConsole is Disabled\r\n");  
        }
   }
    else{
       
        if(sendtextField.getText().equals(""))
            consoleTextArea.append("\r\nYou MUST write something first\r\n");
        else
            consoleTextArea.append("Board Not Connected\r\n");
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void ArmEnableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArmEnableButtonActionPerformed
        if(portsComboBox.getSelectedItem()!=null){
        Comms.getInstance().closePort();
        consoleTextArea.append("Trying to Upload Firmware. Please Wait...\r\n");
        try{
            //File nf = new File(this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath());
            //String path = nf.getParent();
            String path = this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();
            String decodedPath = URLDecoder.decode(path.substring(1,path.length()-13), "UTF-8");
            System.out.println("COMMAND: " + decodedPath + "/maple_upload.bat " + String.valueOf(portsComboBox.getSelectedItem()) +" 2 1EAF:0003 " + decodedPath + "/ArmBlink.bin");
            //Process proc = Runtime.getRuntime().exec("c:/temp/maple_upload.bat COM64 2 1EAF:0003 c:/temp/FPGALoader.ino.bin");
            System.out.println(decodedPath);
            Process proc = Runtime.getRuntime().exec(decodedPath + "/maple_upload.bat " + String.valueOf(portsComboBox.getSelectedItem()) +" 2 1EAF:0003 " + decodedPath + "/ArmBlink.bin");
            proc.waitFor(10,TimeUnit.SECONDS);
            InputStream in = proc.getInputStream();
            InputStream err = proc.getErrorStream();
            
            byte b[]=new byte[in.available()];
            in.read(b,0,b.length);
            byte c[]=new byte[err.available()];
            err.read(c,0,c.length);
            String str1 = new String(b);
            String str2 = new String(c);
            if(str2.length()<=170){
                consoleTextArea.append(str1);
            consoleTextArea.append("Upload Done! Don't Forget to reconnect to port");
            //Comms.getInstance().setComPort(String.valueOf(portsComboBox.getSelectedItem())); breaks console
            }
            else{
                consoleTextArea.append(str2);   
            }
           // if (str1.contains("Couldn't find the DFU device: [1EAF:0003]")){
           //     consoleTextArea.append("Upload Failed, Retrying.....");
           //     proc.destroy();
           //     Process proc2 = Runtime.getRuntime().exec(decodedPath + "/maple_upload.bat " + String.valueOf(portsComboBox.getSelectedItem()) +" 2 1EAF:0004 " + decodedPath + "/FPGALoader.ino.bin");
           //     proc2.waitFor(10,TimeUnit.SECONDS);
           //    in = proc2.getInputStream();
           //     err = proc2.getErrorStream();
           //     byte d[]=new byte[in.available()];
           //     in.read(d,0,d.length);
           //     consoleTextArea.append(new String(d));
           //    byte e[]=new byte[err.available()];
           //     err.read(e,0,e.length);
           //     consoleTextArea.append(new String(e));
           //     proc2.destroy();
           //     }
            //consoleTextArea.append(URLDecoder.decode(new String(c),"UTF-8"));
            proc.destroy();
            }
        catch(Exception E){
            System.out.println(E);
        }
        }
        else consoleTextArea.append("Try to connect First...");
    }//GEN-LAST:event_ArmEnableButtonActionPerformed

    private void FPGAenableButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FPGAenableButtonActionPerformed
        if(portsComboBox.getSelectedItem()!=null){
        Comms.getInstance().closePort();
        consoleTextArea.append("Trying to Upload Firmware. Please Wait...\r\n");
        try{
            //File nf = new File(this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath());
            //String path = nf.getParent();
            String path = this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();
            String decodedPath = URLDecoder.decode(path.substring(1,path.length()-13), "UTF-8");
            System.out.println("COMMAND: " + decodedPath + "/maple_upload.bat " + String.valueOf(portsComboBox.getSelectedItem()) +" 2 1EAF:0003 " + decodedPath + "/FPGALoader.ino.bin");
            //Process proc = Runtime.getRuntime().exec("c:/temp/maple_upload.bat COM64 2 1EAF:0003 c:/temp/FPGALoader.ino.bin");
            System.out.println(decodedPath);
            Process proc = Runtime.getRuntime().exec(decodedPath + "/maple_upload.bat " + String.valueOf(portsComboBox.getSelectedItem()) +" 2 1EAF:0003 " + decodedPath + "/FPGALoader.ino.bin");
            proc.waitFor(10,TimeUnit.SECONDS);
            InputStream in = proc.getInputStream();
            InputStream err = proc.getErrorStream();
            
            byte b[]=new byte[in.available()];
            in.read(b,0,b.length);
            byte c[]=new byte[err.available()];
            err.read(c,0,c.length);
            String str1 = new String(b);
            String str2 = new String(c);
            if(str2.length()<=170){
                consoleTextArea.append(str1);
            consoleTextArea.append("Upload Done! Don't Forget to reconnect to port");
            //Comms.getInstance().setComPort(String.valueOf(portsComboBox.getSelectedItem()));   //breaks Console
            }
            else{
                consoleTextArea.append(str2);   
            }
            
           // if (str1.contains("Couldn't find the DFU device: [1EAF:0003]")){
           //     consoleTextArea.append("Upload Failed, Retrying.....");
           //     proc.destroy();
           //     Process proc2 = Runtime.getRuntime().exec(decodedPath + "/maple_upload.bat " + String.valueOf(portsComboBox.getSelectedItem()) +" 2 1EAF:0004 " + decodedPath + "/FPGALoader.ino.bin");
           //     proc2.waitFor(10,TimeUnit.SECONDS);
           //    in = proc2.getInputStream();
           //     err = proc2.getErrorStream();
           //     byte d[]=new byte[in.available()];
           //     in.read(d,0,d.length);
           //     consoleTextArea.append(new String(d));
           //    byte e[]=new byte[err.available()];
           //     err.read(e,0,e.length);
           //     consoleTextArea.append(new String(e));
           //     proc2.destroy();
           //     }
            //consoleTextArea.append(URLDecoder.decode(new String(c),"UTF-8"));
            proc.destroy();
            }
        catch(Exception E){
            System.out.println(E);
        }
      }
        else
            consoleTextArea.append("try to Connect First...");
    }//GEN-LAST:event_FPGAenableButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
    String aa = "TO RECOVER THIS BOARD:\r\n"
            +  "1. keep the RESET button on the board pressed\r\n"
            +  "2. click OK button on this window\r\n"
            +  "3. immediately release the RESET button";
    String bb = "Board Recovery";
    int optionT = JOptionPane.OK_CANCEL_OPTION;
    int selection = JOptionPane.showConfirmDialog(null,aa,bb, optionT);
    if(selection == JOptionPane.OK_OPTION){
        try{
            consoleTextArea.append("Recovering.... Please wait!\r\n");
            String path = this.getClass().getProtectionDomain().getCodeSource().getLocation().getPath();
            String decodedPath = URLDecoder.decode(path.substring(1,path.length()-13), "UTF-8");
            Process proc = Runtime.getRuntime().exec(decodedPath + "/maple_upload.bat " + String.valueOf(portsComboBox.getSelectedItem()) +" 2 1EAF:0003 " + decodedPath + "/ArmBlink.bin");
            proc.waitFor(10,TimeUnit.SECONDS);
            InputStream in = proc.getInputStream();
            InputStream err = proc.getErrorStream();
            byte b[]=new byte[in.available()];
            byte c[]=new byte[err.available()];
            in.read(b,0,b.length);
            err.read(c,0,c.length);
            String str1 = new String(b);
            String str2 = new String(c);
            consoleTextArea.append(str1);
            if(str2.length()<=170){
             consoleTextArea.append ("Recovery Done, you should have a blinking led (D-LED)\r\n");
            }
            else{
             consoleTextArea.append (str2);
             consoleTextArea.append("\r\nRecovery Failed, Close the X2Loader, disconnect and reconnect the USB cable and try again\r\n");
            }
        }
        catch(Exception E){
            consoleTextArea.append(E.getMessage());
            consoleTextArea.append("\r\nRecovery Failed, Close the X2Loader, disconnect and reconnect the USB cable and try again\r\n");    
        }
    } 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ArmConsoleCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArmConsoleCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ArmConsoleCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGui().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ArmConsoleCheckBox;
    private javax.swing.JButton ArmEnableButton;
    private javax.swing.JButton FPGAenableButton;
    private javax.swing.JCheckBox autoScrollCheckBox;
    private javax.swing.ButtonGroup boardSettingGRP;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton consoleEnableButton;
    public javax.swing.JTextArea consoleTextArea;
    private javax.swing.JLabel filePath;
    private javax.swing.JButton fpgaModeButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton niosModeButton;
    private javax.swing.JComboBox<String> portsComboBox;
    private javax.swing.JButton sendButton;
    private javax.swing.JCheckBox sendCRCheckBox;
    private javax.swing.JCheckBox sendNLCheckBox;
    private javax.swing.JTextField sendtextField;
    private javax.swing.JTextField sramBase;
    private javax.swing.JTextField sramSize;
    // End of variables declaration//GEN-END:variables
}
